name: üöÄ CI/CD Pipeline Orchestrator

on:
  workflow_dispatch:  # Manual trigger with a single click
    inputs:
      run_all:
        description: 'Run all component and system workflows'
        required: true
        default: true
        type: boolean

jobs:
  trigger-component-workflows:
    name: üîÑ Trigger Component Workflows
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout System Repository
        uses: actions/checkout@v4

      - name: üìù Log Orchestration Start
        run: echo "Starting CI/CD pipeline orchestration across all repositories"
        
      - name: üîß Setup GitHub CLI
        run: |
          # Install GitHub CLI if not already available
          if ! command -v gh &> /dev/null; then
            echo "Installing GitHub CLI..."
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh
          fi
          
          # Login to GitHub CLI using the workflow token
          echo "${{ secrets.CROSS_REPO_TOKEN }}" | gh auth login --with-token
      
      - name: üöÄ Trigger iOS CI Workflow
        run: |
          echo "Triggering iOS CI workflow..."
          gh workflow run ci.yml --repo journalbrand/todo-ios
          
          # Wait for workflow to start running
          sleep 5
          
          # Get the ID of the most recent workflow run
          RUN_ID=$(gh run list --repo journalbrand/todo-ios --workflow=ci.yml --limit=1 --json databaseId --jq '.[0].databaseId')
          
          echo "iOS CI workflow triggered, run ID: $RUN_ID"
          echo "Waiting for iOS CI workflow to complete..."
          
          # Poll until the workflow completes
          while true; do
            STATUS=$(gh run view $RUN_ID --repo journalbrand/todo-ios --json status --jq '.status')
            if [[ "$STATUS" == "completed" ]]; then
              CONCLUSION=$(gh run view $RUN_ID --repo journalbrand/todo-ios --json conclusion --jq '.conclusion')
              echo "iOS CI workflow completed with status: $CONCLUSION"
              if [[ "$CONCLUSION" != "success" ]]; then
                echo "::error::iOS CI workflow failed!"
                exit 1
              fi
              break
            fi
            echo "iOS CI workflow is still running..."
            sleep 30
          done
      
      - name: üöÄ Trigger Android CI Workflow
        run: |
          echo "Triggering Android CI workflow..."
          gh workflow run ci.yml --repo journalbrand/todo-android
          
          # Wait for workflow to start running
          sleep 5
          
          # Get the ID of the most recent workflow run
          RUN_ID=$(gh run list --repo journalbrand/todo-android --workflow=ci.yml --limit=1 --json databaseId --jq '.[0].databaseId')
          
          echo "Android CI workflow triggered, run ID: $RUN_ID"
          echo "Waiting for Android CI workflow to complete..."
          
          # Poll until the workflow completes
          while true; do
            STATUS=$(gh run view $RUN_ID --repo journalbrand/todo-android --json status --jq '.status')
            if [[ "$STATUS" == "completed" ]]; then
              CONCLUSION=$(gh run view $RUN_ID --repo journalbrand/todo-android --json conclusion --jq '.conclusion')
              echo "Android CI workflow completed with status: $CONCLUSION"
              if [[ "$CONCLUSION" != "success" ]]; then
                echo "::error::Android CI workflow failed!"
                exit 1
              fi
              break
            fi
            echo "Android CI workflow is still running..."
            sleep 30
          done
      
      - name: üöÄ Trigger IPFS CI Workflow
        run: |
          echo "Triggering IPFS CI workflow..."
          gh workflow run ci.yml --repo journalbrand/todo-ipfs
          
          # Wait for workflow to start running
          sleep 5
          
          # Get the ID of the most recent workflow run
          RUN_ID=$(gh run list --repo journalbrand/todo-ipfs --workflow=ci.yml --limit=1 --json databaseId --jq '.[0].databaseId')
          
          echo "IPFS CI workflow triggered, run ID: $RUN_ID"
          echo "Waiting for IPFS CI workflow to complete..."
          
          # Poll until the workflow completes
          while true; do
            STATUS=$(gh run view $RUN_ID --repo journalbrand/todo-ipfs --json status --jq '.status')
            if [[ "$STATUS" == "completed" ]]; then
              CONCLUSION=$(gh run view $RUN_ID --repo journalbrand/todo-ipfs --json conclusion --jq '.conclusion')
              echo "IPFS CI workflow completed with status: $CONCLUSION"
              if [[ "$CONCLUSION" != "success" ]]; then
                echo "::error::IPFS CI workflow failed!"
                exit 1
              fi
              break
            fi
            echo "IPFS CI workflow is still running..."
            sleep 30
          done

  trigger-system-workflows:
    name: üîÑ Trigger System Workflows
    runs-on: ubuntu-latest
    needs: [trigger-component-workflows]
    
    steps:
      - name: üì• Checkout System Repository
        uses: actions/checkout@v4
        
      - name: üîß Setup GitHub CLI
        run: |
          # Install GitHub CLI if not already available
          if ! command -v gh &> /dev/null; then
            echo "Installing GitHub CLI..."
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh
          fi
          
          # Login to GitHub CLI using the workflow token
          echo "${{ secrets.CROSS_REPO_TOKEN }}" | gh auth login --with-token
      
      - name: üöÄ Trigger Compliance Matrix Generation Workflow
        run: |
          echo "Triggering Compliance Matrix Generation workflow..."
          gh workflow run compliance-matrix.yml --repo journalbrand/todo-system
          
          # Wait for workflow to start running
          sleep 5
          
          # Get the ID of the most recent workflow run
          RUN_ID=$(gh run list --repo journalbrand/todo-system --workflow=compliance-matrix.yml --limit=1 --json databaseId --jq '.[0].databaseId')
          
          echo "Compliance Matrix Generation workflow triggered, run ID: $RUN_ID"
          echo "Waiting for Compliance Matrix Generation workflow to complete..."
          
          # Poll until the workflow completes
          while true; do
            STATUS=$(gh run view $RUN_ID --repo journalbrand/todo-system --json status --jq '.status')
            if [[ "$STATUS" == "completed" ]]; then
              CONCLUSION=$(gh run view $RUN_ID --repo journalbrand/todo-system --json conclusion --jq '.conclusion')
              echo "Compliance Matrix Generation workflow completed with status: $CONCLUSION"
              if [[ "$CONCLUSION" != "success" ]]; then
                echo "::error::Compliance Matrix Generation workflow failed!"
                exit 1
              fi
              break
            fi
            echo "Compliance Matrix Generation workflow is still running..."
            sleep 30
          done
          
      - name: üìù Log CI/CD Pipeline Completion
        run: |
          echo "üéâ CI/CD pipeline completed successfully across all repositories!"
          echo "The pipeline performed the following:"
          echo "- Ran iOS CI workflow (tests, generated results)"
          echo "- Ran Android CI workflow (tests, generated results)"
          echo "- Ran IPFS CI workflow (tests, generated results)"
          echo "- Generated compliance matrix from test results"
          echo "- Validated test results against requirements"
          echo "- Updated the compliance dashboard" 