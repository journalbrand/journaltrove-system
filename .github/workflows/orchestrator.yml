name: 🚀 CI/CD Pipeline Orchestrator

on:
  workflow_dispatch:  # Manual trigger with a single click
    inputs:
      run_all:
        description: 'Run all component and system workflows'
        required: true
        default: true
        type: boolean

jobs:
  early-validation:
    name: 🔍 Early Requirements Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout System Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
      
      - name: 📦 Install dependencies
        run: |
          npm init -y
          npm install ajv ajv-formats
          sudo apt-get update && sudo apt-get install -y jq
      
      - name: 🔧 Setup GitHub CLI
        run: |
          # Install GitHub CLI if not already available
          if ! command -v gh &> /dev/null; then
            echo "Installing GitHub CLI..."
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh
          fi
          
          # Login to GitHub CLI using the workflow token
          echo "${{ secrets.CROSS_REPO_TOKEN }}" | gh auth login --with-token
      
      - name: 📥 Fetch Component Requirements
        run: |
          # Create directories
          mkdir -p components/ios/requirements
          mkdir -p components/android/requirements
          mkdir -p components/ipfs/requirements
          
          # Fetch files using GitHub API
          echo "Fetching iOS requirements..."
          gh api repos/journalbrand/journaltrove-ios/contents/requirements/requirements.jsonld --jq '.content' | base64 -d > components/ios/requirements/requirements.jsonld
          
          echo "Fetching Android requirements..."
          gh api repos/journalbrand/journaltrove-android/contents/requirements/requirements.jsonld --jq '.content' | base64 -d > components/android/requirements/requirements.jsonld
          
          echo "Fetching IPFS requirements..."
          gh api repos/journalbrand/journaltrove-ipfs/contents/requirements/requirements.jsonld --jq '.content' | base64 -d > components/ipfs/requirements/requirements.jsonld
      
      - name: 📥 Fetch Component Test Mappings
        run: |
          # Make script executable
          chmod +x scripts/fetch-test-mappings.sh
          
          # Run the script
          ./scripts/fetch-test-mappings.sh
      
      - name: 🔍 Validate JSON-LD Format
        run: |
          # Validate all requirements files
          echo "Validating system requirements..."
          jq empty requirements/requirements.jsonld
          
          echo "Validating iOS requirements..."
          jq empty components/ios/requirements/requirements.jsonld
          
          echo "Validating Android requirements..."
          jq empty components/android/requirements/requirements.jsonld
          
          echo "Validating IPFS requirements..."
          jq empty components/ipfs/requirements/requirements.jsonld
      
      - name: 🧪 Validate Requirements Hierarchy
        run: |
          # Make validation script executable
          chmod +x scripts/validate-requirements-early.js
          
          # Run validation on all requirements files
          echo "Validating requirements hierarchy and test mappings..."
          node scripts/validate-requirements-early.js \
            requirements/requirements.jsonld \
            components/ios/requirements/requirements.jsonld \
            components/android/requirements/requirements.jsonld \
            components/ipfs/requirements/requirements.jsonld \
            tmp/test-mappings/ios/test-mappings.jsonld \
            tmp/test-mappings/android/test-mappings.jsonld \
            tmp/test-mappings/ipfs/test-mappings.jsonld

  trigger-component-workflows:
    name: 🔄 Trigger Component Workflows
    runs-on: ubuntu-latest
    needs: [early-validation]
    
    steps:
      - name: 📥 Checkout System Repository
        uses: actions/checkout@v4

      - name: 📝 Log Orchestration Start
        run: echo "Starting CI/CD pipeline orchestration across all repositories"
        
      - name: 🔧 Setup GitHub CLI
        run: |
          # Install GitHub CLI if not already available
          if ! command -v gh &> /dev/null; then
            echo "Installing GitHub CLI..."
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh
          fi
          
          # Login to GitHub CLI using the workflow token
          echo "${{ secrets.CROSS_REPO_TOKEN }}" | gh auth login --with-token
      
      - name: 🚀 Trigger All Component CI Workflows in Parallel
        run: |
          # Trigger all CI workflows in parallel
          echo "Triggering iOS CI workflow..."
          gh workflow run ci.yml --repo journalbrand/journaltrove-ios
          
          echo "Triggering Android CI workflow..."
          gh workflow run ci.yml --repo journalbrand/journaltrove-android
          
          echo "Triggering IPFS CI workflow..."
          gh workflow run ci.yml --repo journalbrand/journaltrove-ipfs
          
          # Wait for all workflows to start running (give them some time to initialize)
          echo "Waiting for workflows to start..."
          sleep 10
          
          # Get the IDs of the most recent workflow runs
          IOS_RUN_ID=$(gh run list --repo journalbrand/journaltrove-ios --workflow=ci.yml --limit=1 --json databaseId --jq '.[0].databaseId')
          ANDROID_RUN_ID=$(gh run list --repo journalbrand/journaltrove-android --workflow=ci.yml --limit=1 --json databaseId --jq '.[0].databaseId')
          IPFS_RUN_ID=$(gh run list --repo journalbrand/journaltrove-ipfs --workflow=ci.yml --limit=1 --json databaseId --jq '.[0].databaseId')
          
          echo "iOS CI workflow triggered, run ID: $IOS_RUN_ID"
          echo "Android CI workflow triggered, run ID: $ANDROID_RUN_ID"
          echo "IPFS CI workflow triggered, run ID: $IPFS_RUN_ID"
          
          # Function to check workflow status
          check_workflow_status() {
            local repo=$1
            local run_id=$2
            local name=$3
            
            STATUS=$(gh run view $run_id --repo $repo --json status --jq '.status')
            if [[ "$STATUS" == "completed" ]]; then
              CONCLUSION=$(gh run view $run_id --repo $repo --json conclusion --jq '.conclusion')
              echo "$name CI workflow completed with status: $CONCLUSION"
              if [[ "$CONCLUSION" != "success" ]]; then
                echo "::error::$name CI workflow failed!"
                return 1
              fi
              return 0
            else
              echo "$name CI workflow is still running..."
              return 2
            fi
          }
          
          # Poll until all workflows complete
          echo "Waiting for all component workflows to complete..."
          IOS_DONE=false
          ANDROID_DONE=false
          IPFS_DONE=false
          
          while true; do
            # Check all workflows that haven't completed yet
            
            if [[ "$IOS_DONE" != "true" ]]; then
              check_workflow_status "journalbrand/journaltrove-ios" $IOS_RUN_ID "iOS"
              RESULT=$?
              if [[ $RESULT -eq 0 ]]; then
                IOS_DONE=true
              elif [[ $RESULT -eq 1 ]]; then
                echo "iOS workflow failed, aborting orchestration"
                exit 1
              fi
            fi
            
            if [[ "$ANDROID_DONE" != "true" ]]; then
              check_workflow_status "journalbrand/journaltrove-android" $ANDROID_RUN_ID "Android"
              RESULT=$?
              if [[ $RESULT -eq 0 ]]; then
                ANDROID_DONE=true
              elif [[ $RESULT -eq 1 ]]; then
                echo "Android workflow failed, aborting orchestration"
                exit 1
              fi
            fi
            
            if [[ "$IPFS_DONE" != "true" ]]; then
              check_workflow_status "journalbrand/journaltrove-ipfs" $IPFS_RUN_ID "IPFS"
              RESULT=$?
              if [[ $RESULT -eq 0 ]]; then
                IPFS_DONE=true
              elif [[ $RESULT -eq 1 ]]; then
                echo "IPFS workflow failed, aborting orchestration"
                exit 1
              fi
            fi
            
            # If all workflows are done, break the loop
            if [[ "$IOS_DONE" == "true" && "$ANDROID_DONE" == "true" && "$IPFS_DONE" == "true" ]]; then
              echo "✅ All component workflows completed successfully!"
              break
            fi
            
            # Wait before checking again
            echo "At least one workflow is still running, checking again in 30 seconds..."
            sleep 30
          done

  trigger-system-workflows:
    name: 🔄 Trigger System Workflows
    runs-on: ubuntu-latest
    needs: [trigger-component-workflows]
    
    steps:
      - name: 📥 Checkout System Repository
        uses: actions/checkout@v4
        
      - name: 🔧 Setup GitHub CLI
        run: |
          # Install GitHub CLI if not already available
          if ! command -v gh &> /dev/null; then
            echo "Installing GitHub CLI..."
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh
          fi
          
          # Login to GitHub CLI using the workflow token
          echo "${{ secrets.CROSS_REPO_TOKEN }}" | gh auth login --with-token
      
      - name: 🚀 Trigger Compliance Matrix Generation Workflow
        run: |
          echo "Triggering Compliance Matrix Generation workflow..."
          gh workflow run compliance-matrix.yml --repo journalbrand/journaltrove-system
          
          # Wait for workflow to start running
          sleep 5
          
          # Get the ID of the most recent workflow run
          RUN_ID=$(gh run list --repo journalbrand/journaltrove-system --workflow=compliance-matrix.yml --limit=1 --json databaseId --jq '.[0].databaseId')
          
          echo "Compliance Matrix Generation workflow triggered, run ID: $RUN_ID"
          echo "Waiting for Compliance Matrix Generation workflow to complete..."
          
          # Poll until the workflow completes
          while true; do
            STATUS=$(gh run view $RUN_ID --repo journalbrand/journaltrove-system --json status --jq '.status')
            if [[ "$STATUS" == "completed" ]]; then
              CONCLUSION=$(gh run view $RUN_ID --repo journalbrand/journaltrove-system --json conclusion --jq '.conclusion')
              echo "Compliance Matrix Generation workflow completed with status: $CONCLUSION"
              if [[ "$CONCLUSION" != "success" ]]; then
                echo "::error::Compliance Matrix Generation workflow failed!"
                exit 1
              fi
              break
            fi
            echo "Compliance Matrix Generation workflow is still running..."
            sleep 30
          done
          
      - name: 📝 Log CI/CD Pipeline Completion
        run: |
          echo "🎉 CI/CD pipeline completed successfully across all repositories!"
          echo "The pipeline performed the following:"
          echo "- Ran iOS CI workflow (tests, generated results)"
          echo "- Ran Android CI workflow (tests, generated results)"
          echo "- Ran IPFS CI workflow (tests, generated results)"
          echo "- Generated compliance matrix from test results"
          echo "- Validated test results against requirements"
          echo "- Updated the compliance dashboard" 