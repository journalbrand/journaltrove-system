name: üß™ Test Results Validation

on:
  workflow_dispatch:  # Manual trigger
  workflow_run:
    workflows: ["üåπ Compliance Matrix Generation"]
    types:
      - completed

jobs:
  validate-test-results:
    name: üìä Validate Test Results
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout System Repository
        uses: actions/checkout@v4
      
      - name: üßπ Clean Up Any Existing Test Results
        run: |
          echo "Cleaning up any existing generated JSON-LD files..."
          
          # Remove all test result files
          rm -rf compliance/results
          
          # Remove all compliance matrix files
          rm -rf compliance/reports
          rm -f compliance/dashboard/compliance_matrix.jsonld
          rm -f compliance_matrix.jsonld
          
          # Remove any cloud artifacts directory
          rm -rf cloud_artifacts
          
          # Remove any temp directories and files
          rm -rf temp
          rm -rf tmp
          
          # Remove component temporary files
          rm -rf components
          
          echo "‚úÖ Cleanup completed. All generated JSON-LD files have been removed."
          
          # Verify what remains (for debugging)
          echo "Remaining .jsonld files (only source files should be listed):"
          find . -name "*.jsonld" | grep -v "requirements.jsonld\|requirements-context.jsonld\|test-results-template.jsonld" || echo "No unexpected .jsonld files found"
      
      - name: üîß Setup jq
        run: sudo apt-get update && sudo apt-get install -y jq
      
      - name: üîß Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
      
      - name: üì¶ Install dependencies for JSON-LD validation
        run: |
          npm init -y
          npm install ajv ajv-formats
        
      - name: üì• Download Compliance Matrix
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: compliance-matrix.yml
          workflow_conclusion: success
          name: compliance-matrix-jsonld
          path: compliance/reports/
          github_token: ${{ secrets.CROSS_REPO_TOKEN }}
          check_artifacts: true
          if_no_artifact_found: warn

      - name: üìÇ Create Compliance Results Directories
        run: |
          mkdir -p compliance/results/ios
          mkdir -p compliance/results/android
          mkdir -p compliance/results/ipfs
          
      - name: üì• Download iOS Test Results
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: ci.yml
          workflow_conclusion: success
          name: ios-test-results-jsonld
          path: compliance/results/ios
          repo: journalbrand/journaltrove-ios
          github_token: ${{ secrets.CROSS_REPO_TOKEN }}
          check_artifacts: true
          if_no_artifact_found: error
          
      - name: üì• Download Android Test Results
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: ci.yml
          workflow_conclusion: success
          name: android-test-results-jsonld
          path: compliance/results/android
          repo: journalbrand/journaltrove-android
          github_token: ${{ secrets.CROSS_REPO_TOKEN }}
          check_artifacts: true
          if_no_artifact_found: error
          
      - name: üì• Download IPFS Test Results
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: ci.yml
          workflow_conclusion: success
          name: ipfs-test-results-jsonld
          path: compliance/results/ipfs
          repo: journalbrand/journaltrove-ipfs
          github_token: ${{ secrets.CROSS_REPO_TOKEN }}
          check_artifacts: true
          if_no_artifact_found: error
          
      - name: üîç Validate Compliance Matrix
        run: |
          if [ -f "compliance/reports/compliance_matrix.jsonld" ]; then
            echo "Compliance matrix found"
            
            # Check JSON-LD syntax
            jq empty "compliance/reports/compliance_matrix.jsonld"
            echo "Compliance matrix JSON-LD syntax is valid"
            
            # Validate compliance matrix against schema (if we have one)
            if [ -f "schema/compliance-matrix-schema.json" ]; then
              node scripts/validate-jsonld.js schema/compliance-matrix-schema.json compliance/reports/compliance_matrix.jsonld
              echo "Compliance matrix schema validation successful"
            else
              echo "No schema found for compliance matrix, skipping schema validation"
            fi
          else
            echo "Compliance matrix not found!"
            exit 1
          fi
          
      - name: üß™ Verify Requirement Coverage
        run: |
          if [ -f "compliance/reports/compliance_matrix.jsonld" ]; then
            # Extract all requirement IDs from the system requirements
            SYSTEM_REQS=$(jq -r '.["@graph"][] | select(.type == "Requirement") | .id' requirements/requirements.jsonld)
            
            # Extract all requirement IDs that have test cases in the compliance matrix
            TESTED_REQS=$(jq -r '.["@graph"][] | .testCases[]? | .verifies' compliance/reports/compliance_matrix.jsonld)
            
            # Simple validation to ensure all system requirements have tests
            for req in $SYSTEM_REQS; do
              if echo "$TESTED_REQS" | grep -q "$req"; then
                echo "‚úÖ Requirement $req has test coverage"
              else
                echo "‚ö†Ô∏è Warning: Requirement $req has no test coverage"
                # Not failing the build but warning about missing coverage
              fi
            done
          else
            echo "Compliance matrix not found for coverage validation"
            exit 1
          fi
          
      - name: üîç Validate Test Results JSON-LD Format
        run: |
          # Validate the JSON syntax of each test result file
          echo "Validating iOS test results format..."
          jq empty compliance/results/ios/test-results.jsonld
          
          echo "Validating Android test results format..."
          jq empty compliance/results/android/test-results.jsonld
          
          echo "Validating IPFS test results format..."
          jq empty compliance/results/ipfs/test-results.jsonld
          
          echo "‚úÖ All test result files have valid JSON-LD syntax"
          
      - name: üîç Validate Requirement ID References
        run: |
          # Make validation script executable
          chmod +x scripts/validate-requirement-ids.js
          
          # If we have the compliance matrix, copy it to the results directory for validation
          if [ -f "compliance/reports/compliance_matrix.jsonld" ]; then
            cp compliance/reports/compliance_matrix.jsonld compliance/results/
          fi
          
          # Run validation on test results
          echo "Validating requirement ID references in test results..."
          node scripts/validate-requirement-ids.js requirements/requirements.jsonld compliance/results
          
          # Check the exit code of the validate-requirement-ids.js script
          VALIDATION_EXIT_CODE=$?
          if [ $VALIDATION_EXIT_CODE -eq 0 ]; then
            echo "‚úÖ All requirement references are valid"
          else
            echo "‚ùå ERROR: Invalid requirement references detected!"
            echo "Tests must reference valid requirements from the requirements.jsonld file."
            echo "This is a critical error - failing fast!"
            exit $VALIDATION_EXIT_CODE
          fi 